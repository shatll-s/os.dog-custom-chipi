#!/bin/bash
####################################################################################
###
### qubminer beta for qubic.li
### os.dog integration: shatll(@osdog)
###
####################################################################################

. /dog/colors
cd `dirname $0`

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"
. $CFG_FILENAME

#	custom package variables
####################################################################################
LOG="/dog/log/qubminer-beta.log"
SETTINGS_FILE="appsettings.json"
SETTINGS_GLOBAL_FILE="appsettings_global.json"

process_user_config() {
    while IFS= read -r line; do
        [[ -z $line ]] && continue

        # Remove spaces only from the beginning of the line
        line=$(echo "$line" | sed 's/^[[:space:]]*//')

        # Extract parameter and its value from the configuration line
        param=$(awk -F':' '{gsub(/\"/, ""); print $1}' <<< "$line")
        value=$(awk -F':' '{gsub(/^[[:space:]]*/, ""); print substr($0, length($1) + 2)}' <<< "$line")

        # Convert parameter to uppercase
        param_high=$(echo "$param" | tr '[:lower:]' '[:upper:]')

        # Perform replacements in the parameter
        modified_param=$(echo "$param_high" | awk '{
            gsub("QUBICADDRESS", "qubicAddress");
            gsub("CPUTHREADS", "cpuThreads");
            gsub("ACCESSTOKEN", "accessToken");
            gsub("ALLOWHWINFOCOLLECT", "allowHwInfoCollect");
            gsub("HUGEPAGES", "hugePages");
            gsub("ALIAS", "alias");
            gsub("OVERWRITES", "overwrites");
            gsub("IDLESETTINGS", "Idling");
            gsub("PPS=", "\"pps\": ");
            gsub("USELIVECONNECTION", "useLiveConnection");
            gsub("TRAINER", "trainer");
            print $0;
        }')

        # Check if modifications were made, if not, use the original parameter
        [[ "$param" != "$modified_param" ]] && param=$modified_param

        # General processing for other parameters
        if [[ ! -z "$value" ]]; then
            if [[ "$param" == "overwrites" || "$param" == "trainer" ]]; then
                Settings=$(jq -s '.[0] * .[1]' <<< "$Settings {$line}")
            elif [[ "$param" == "Idling" ]]; then
                Settings=$(jq --argjson Idling "$value" '
                    .Idling = $Idling |
                    .Idling.preCommand = ($Idling.preCommand // null) |
                    .Idling.preCommandArguments = ($Idling.preCommandArguments // null) |
                    .Idling.command = ($Idling.command // null) |
                    .Idling.arguments = ($Idling.arguments // null) |
                    .Idling.postCommand = ($Idling.postCommand // null) |
                    .Idling.postCommandArguments = ($Idling.postCommandArguments // null)
                ' <<< "$Settings")
            elif [[ "$param" == "accessToken" ]]; then
                value=$(echo "$value" | sed 's/^"//;s/"$//')
                Settings=$(jq --arg value "$value" '.accessToken = $value' <<< "$Settings")
            elif [[ "$param" == "pps" || "$param" == "useLiveConnection" ]]; then
                if [[ "$value" == "true" || "$value" == "false" ]]; then
                    Settings=$(jq --argjson value "$value" '.[$param] = $value' <<< "$Settings")
                else
                    echo "Invalid value for $param: $value. It must be 'true' or 'false'. Skipping this entry."
                fi
            else
                if [[ "$param" == "trainer.cpuThreads" ]]; then
                    Settings=$(jq --arg value "$value" '.trainer.cpuThreads = ($value | tonumber)' <<< "$Settings")
                elif [[ "$param" == "trainer.gpu" ]]; then
                    Settings=$(jq --argjson value "$value" '.trainer.gpu = $value' <<< "$Settings")
                elif [[ "$value" == "null" ]]; then
                    Settings=$(jq --arg param "$param" '.[$param] = null' <<< "$Settings")
                elif [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    Settings=$(jq --arg param "$param" --argjson value "$value" '.[$param] = ($value | tonumber)' <<< "$Settings")
                else
                    Settings=$(jq --arg param "$param" --arg value "$value" '.[$param] = $value' <<< "$Settings")
                fi
            fi
        fi
    done <<< "$ADDITION"
}

# Main script logic

# Processing global settings
GlobalSettings=$(jq -r '.ClientSettings' $SETTINGS_GLOBAL_FILE | envsubst)

# Initialize Settings
Settings="$GlobalSettings"

# Delete old settings
eval "rm -rf $SETTINGS_FILE"

# Processing the template (alias)
if [[ ! -z $TEMPLATE ]]; then
    Settings=$(jq --arg alias "$TEMPLATE" '.alias = $alias' <<< "$Settings")
fi

# Processing user configuration
[[ ! -z $ADDITION ]] && process_user_config

# Adding poolAddress settings
if [[ ! -z $POOL ]]; then
    Settings=$(jq --arg poolAddress "$POOL" '.poolAddress = $poolAddress' <<< "$Settings")
fi

# Check and modify Settings for hugePages parameter
if [[ $(jq '.hugePages' <<< "$Settings") != null ]]; then
    hugePages=$(jq -r '.hugePages' <<< "$Settings")
    if [[ ! -z $hugePages && $hugePages -gt 0 ]]; then
        eval "sysctl -w vm.nr_hugepages=$hugePages"
    fi
fi

# Ensure trainer settings are properly set
Settings=$(jq '
    if .trainer == null then .trainer = {} else . end |
    if .trainer.cpu == null then .trainer.cpu = false else . end |
    if .trainer.gpu == null then .trainer.gpu = false else . end |
    if .trainer.cpu == false and .trainer.gpu == false then .trainer.cpu = true else . end |
    if .trainer.cpu == true and .trainer.cpuThreads == null then .trainer.cpuThreads = 0 else . end
' <<< "$Settings")

# Create the final settings file
echo "{\"ClientSettings\":$Settings}" | jq . > "$SETTINGS_FILE"

echo "Settings created successfully."



















#	custom package body

[[ $POOL ]] && pool=$POOL || pool="https://mine.qubic.li/"
threads=`nproc`
alias=`cat /etc/hostname`

trainer=$(
  jq -n \
  '{
  	"cpu": false,
  	"gpu": true,
  	"gpuVersion": "CUDA12"
  }'
)

json=$(
  jq -n \
  --arg baseUrl "$pool" \
  --argjson amountOfThreads $threads \
  --argjson trainer "$trainer" \
  --arg alias "$alias" \
  '{
    "Settings": {
      $baseUrl, $amountOfThreads, $alias, $trainer,
      "autoupdateEnabled": true,
      "allowHwInfoCollect": true,
    }
  }'
)

if [[ ${#WALLET} -ge 61 ]]; then
  json=`jq ".Settings += {\"accessToken\": \"$WALLET\"}" <<< "$json"`
else
  json=`jq ".Settings += {\"payoutId\": \"$WALLET\"}" <<< "$json"`
fi

#json=`jq ".Settings += {\"overwrites\": {\"CUDA\": \"12\"}}" <<< "$json"`

echo "$json" > $SETTINGS_FILE

$LINE
echo -e "${GREEN}> Starting custom miner with next settings:${WHITE}"
echo $json | jq '.'

batch="./qli-Client $args"

#	unbuffer is needed to keep colors with tee
unbuffer $batch 2>&1 | tee --append $LOG
