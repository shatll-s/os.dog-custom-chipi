#!/bin/bash
####################################################################################
###
### QUBIC miner for ton.ninja
### os.dog integration: shatll(@osdog), with inclusions of @zakez code
###
####################################################################################

#   example
#
#	{
#		"miner":"lolminer",
#		"algo":"nexapow",
#		"online":"1707474764",
#		"total_hr":"71842910",
#		"total_share":"1",
#		"total_badshare":"0",
#		"ver":"1.82a",
#		"hr":[11580000,27740000,0,0,2990000,0,22650000,6880000],
#		"share":[0,1,0,0,0,0,0,0],
#		"badshare":[0,0,0,0,0,0,0,0],
#		"invshare":[0,0,0,0,0,0,0,0],
#		"busid":["03","05","06","07","09","0b","0c","0d"],
#		"coin":"NEXA"
#		"temp":[31,28,29,29,31,29,30,30],     #  unnecessary field if 'busid' is provided
#		"temp2":[38,35,35,35,37,34,37,37],    #  unnecessary field if 'busid' is provided
#		"temp3":[0,0,0,0,0,0,0,0],            #  unnecessary field if 'busid' is provided
#		"fan":[45,45,44,45,44,44,45,46],      #  unnecessary field if 'busid' is provided
#	}


baseDir=`dirname $0`
miner="apoolminer"

cd $baseDir

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"
. $CFG_FILENAME

LOG="/dog/log/apoolminer.log"

algo="qubic"
ver=`$baseDir/$miner --version | sed 's/ApoolMiner //'`
[[ ! $ver ]] && ver='unknown'

gpus_raw=`curl -s --connect-timeout 3 --max-time 5 http://127.0.0.1:$API_PORT/gpu`

if [[ $? -ne 0 || -z $gpus_raw ]]; then
  exit 1
fi

# shellcheck disable=SC2120
function get_cpu_temp() {
	# shellcheck disable=SC2045
	for HWMON in $(ls /sys/class/hwmon); do
		[[ -f /sys/class/hwmon/${HWMON}/name ]] &&
			local test=$(cat /sys/class/hwmon/${HWMON}/name | grep -c -E 'coretemp|k10temp|k8temp')
		if [[ $test -gt 0 ]]; then
			HWMON_DIR=/sys/class/hwmon/$HWMON
			break
		fi
	done
	local inputs=()
	local temp=
	[[ ! -z $HWMON_DIR ]] && readarray -t inputs < <(ls $HWMON_DIR/temp*_input | sort -V)
	[[ ${#inputs[@]} -eq 0 ]] && echo "null" && return 1
	local input=
	[[ -z "$1" ]] && input=0
	[[ "$1" =~ ^[0-9]+$ ]] && input=$1
	[[ ! -z $input && ! -z ${inputs[input]} ]] && temp=`awk '{ printf("%.0f\n", $1/1000)}' ${inputs[input]} 2>/dev/null`
	echo "${temp:-null}"
}

stats_template=`echo "$gpus_raw" | jq -cr '.data'`

uptime=`echo $stats_template | jq -r '.uptime'`
online=$(date --date "-$uptime sec" +%s) #absolute time

hr=`echo $stats_template | jq '[.gpus[].proof * 100 | floor / 100]'`
total_hr=`echo $stats_template | jq '[.gpus[].proof * 100] | add | floor / 100'`

share=`echo $stats_template | jq '[.gpus[].valid]'`
total_share=`echo $stats_template | jq '[.gpus[].valid] | add | tonumber'`

badshare=`echo $stats_template | jq '[.gpus[].inval]'`
total_badshare=`echo $stats_template | jq '[.gpus[].inval] | add'`

busidRaw=`echo $stats_template | jq -r '[.gpus[].bus]'`
busid='[]'
temp='[]'
fan='[]'

for (( i=0; i < `echo $busidRaw | jq 'length'`; i++ )); do
  tempVal=
  fanVal=
  busidHex=

  bus=`echo $busidRaw | jq -r ".[$i]"`
  if [[ $bus != 0 ]]; then
    busidHex=`printf "%x" $bus | tr '[:upper:]' '[:lower:]'`
    [[ `echo ${#busidHex}` -eq 1 ]] && busidHex="0$busidHex"

  else
    device=`echo $stats_template | jq -r ".gpus[$i].device"`
    if [[ $device == 'CPU' ]]; then
      tempVal=`get_cpu_temp`
      cpuFanRPMIntel=(`sensors -u *-isa-* 2>/dev/null | grep fan -A1 | grep _input | sed 's/.*_input: //'`)
      for v in ${cpuFanRPMIntel[@]}; do
          [ ${v::-4} -gt 0 ] && fanVal=${v::-4}
      done
    fi
  fi
  busid=`jq ". + [\"$busidHex\"]" <<< "$busid"`
  temp=`jq ". + [\"$tempVal\"]" <<< "$temp"`
  fan=`jq ". + [\"$fanVal\"]" <<< "$fan"`
done

data=$(jq -nc \
  --arg miner "apoolminer" \
  --arg algo "qubic" \
  --arg ver "$ver" \
  --argjson online "$online" \
  --argjson hr "$hr" \
  --argjson total_hr "$total_hr" \
  --argjson share "$share" \
  --argjson total_share "$total_share" \
  --argjson badshare "$badshare" \
  --argjson total_badshare "$total_badshare" \
  --argjson busid "$busid" \
  --argjson temp "$temp" \
  --argjson fan "$fan" \
  '{
    $miner, $algo, $ver, $online,
    $hr, $total_hr,
    $share, $total_share,
    $badshare, $total_badshare,
    $busid,
    $temp, $fan
  }')

if [[ ! -z $COIN ]]; then
  data=`jq ". += {\"coin\": \"$COIN\"}" <<< "$data"`
fi

#   finally return json data
echo "$data" | jq -c
