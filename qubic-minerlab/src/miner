#!/bin/bash
####################################################################################
###
### QUBIC miner for qubic.minerlab.io
### os.dog integration: shatll(@osdog)
###
####################################################################################

. /dog/colors
cd `dirname $0`

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"
. $CFG_FILENAME

#	custom package variables
####################################################################################
LOG="/dog/log/qubic-minerlab.log"
SETTINGS_FILE="appsettings.json"
SETTINGS_GLOBAL_FILE="appsettings_global.json"

####################################################################################
#[[ $POOL ]] && pool=$POOL || pool="https://mine.qubic.li/"
#threads=`nproc`
#alias=`cat /etc/hostname`
#
#trainer=$(
#  jq -n \
#  '{
#  	"cpu": false,
#  	"gpu": true,
#  	"gpuVersion": "CUDA12"
#  }'
#)
#
#json=$(
#  jq -n \
#  --arg baseUrl "$pool" \
#  --argjson amountOfThreads $threads \
#  --argjson trainer "$trainer" \
#  --arg alias "$alias" \
#  '{
#    "Settings": {
#      $baseUrl, $amountOfThreads, $alias, $trainer,
#      "autoupdateEnabled": true,
#      "allowHwInfoCollect": true,
#    }
#  }'
#)
#
#if [[ ${#WALLET} -ge 61 ]]; then
#  json=`jq ".Settings += {\"accessToken\": \"$WALLET\"}" <<< "$json"`
#else
#  json=`jq ".Settings += {\"payoutId\": \"$WALLET\"}" <<< "$json"`
#fi
#
##json=`jq ".Settings += {\"overwrites\": {\"CUDA\": \"12\"}}" <<< "$json"`
#
#echo "$json" > $SETTINGS_FILE
####################################################################################

GlobalSettings=$(jq -r '.ClientSettings' $SETTINGS_GLOBAL_FILE | envsubst)

# Initialize Settings
Settings="$GlobalSettings"

# Delete old settings
eval "rm -rf $SETTINGS_FILE"

# Processing the template (alias)
if [[ ! -z $TEMPLATE ]]; then
    Settings=$(jq --arg accessToken "$TEMPLATE" '.accessToken = $accessToken' <<< "$Settings")
fi
## Processing user configuration (check if $ADDITION is not empty and does not contain only spaces)
#echo "addition $ADDITION"
#[[ ! -z "${ADDITION// }" ]] && process_user_config

# Adding poolAddress settings
if [[ ! -z $POOL ]]; then
    Settings=$(jq --arg poolAddress "$POOL" '.poolAddress = $poolAddress' <<< "$Settings")

    if [[ "$POOL" == *"pps"* ]]; then
      Settings=$(jq '.pps = true' <<< "$Settings")
    else
      Settings=$(jq '.pps = false' <<< "$Settings")
    fi
fi

## Check and modify Settings for hugePages parameter
#if [[ $(jq '.hugePages' <<< "$Settings") != null ]]; then
#    hugePages=$(jq -r '.hugePages' <<< "$Settings")
#    if [[ ! -z $hugePages && $hugePages -gt 0 ]]; then
#        eval "sysctl -w vm.nr_hugepages=$hugePages"
#    fi
#fi

trainer=$(
  jq -n \
  '{
  	"cpu": false,
  	"gpu": true
  }'
)

Settings=$(jq --argjson trainer "$trainer" '.trainer = $trainer' <<< "$Settings")
echo "addition $ADDITION"
if [[ "$ADDITION" == *"--cpu"* ]]; then
  echo 'kiska GOGO'
  threads=`nproc`
  Settings=$(jq ".trainer.cpu = true | .trainer.cpuThreads = $threads" <<< "$Settings")
fi

if [[ "$ADDITION" == *"--worker "* ]]; then
  alias=`echo $ADDITION | sed -e 's/.*--worker //; s/ .*//'`
else
  alias=`cat /etc/hostname`
fi

Settings=$(jq ".alias = \"$alias\"" <<< "$Settings")
echo "aaaaa"
echo $Settings | jq '.'
echo "sssss"
# Ensure trainer settings are properly set
#Settings=$(jq '
#    if .trainer == null then .trainer = {} else . end |
#    if .trainer.cpu == null then .trainer.cpu = false else . end |
#    if .trainer.gpu == null then .trainer.gpu = false else . end |
#    if .trainer.cpu == false and .trainer.gpu == false then .trainer.cpu = true else . end |
#    if .trainer.cpu == true and .trainer.cpuThreads == null then .trainer.cpuThreads = 0 else . end
#' <<< "$Settings")

# Create the final settings file
echo "{\"ClientSettings\":$Settings}" | jq . > "$SETTINGS_FILE"

echo "Settings created successfully."


batch="./qli-Client"

#	unbuffer is needed to keep colors with tee
unbuffer $batch 2>&1 | tee --append $LOG
